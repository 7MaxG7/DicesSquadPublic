//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""BattleSelection"",
            ""id"": ""391cd62c-9a16-4375-8864-d32af47ed7d5"",
            ""actions"": [
                {
                    ""name"": ""InfoClick"",
                    ""type"": ""Button"",
                    ""id"": ""09cc28fe-aa22-43cf-8736-69e72966ec1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""22d63f6d-2a81-48aa-90f0-02f6d26455e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35266bed-f930-4ea8-bb03-1d5ea758f04d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""InfoClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03e7b47c-fe1b-4986-b40f-da4727b29036"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BattleSelection
        m_BattleSelection = asset.FindActionMap("BattleSelection", throwIfNotFound: true);
        m_BattleSelection_InfoClick = m_BattleSelection.FindAction("InfoClick", throwIfNotFound: true);
        m_BattleSelection_PointerPosition = m_BattleSelection.FindAction("PointerPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleSelection
    private readonly InputActionMap m_BattleSelection;
    private List<IBattleSelectionActions> m_BattleSelectionActionsCallbackInterfaces = new List<IBattleSelectionActions>();
    private readonly InputAction m_BattleSelection_InfoClick;
    private readonly InputAction m_BattleSelection_PointerPosition;
    public struct BattleSelectionActions
    {
        private @InputControls m_Wrapper;
        public BattleSelectionActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @InfoClick => m_Wrapper.m_BattleSelection_InfoClick;
        public InputAction @PointerPosition => m_Wrapper.m_BattleSelection_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_BattleSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleSelectionActions set) { return set.Get(); }
        public void AddCallbacks(IBattleSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleSelectionActionsCallbackInterfaces.Add(instance);
            @InfoClick.started += instance.OnInfoClick;
            @InfoClick.performed += instance.OnInfoClick;
            @InfoClick.canceled += instance.OnInfoClick;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
        }

        private void UnregisterCallbacks(IBattleSelectionActions instance)
        {
            @InfoClick.started -= instance.OnInfoClick;
            @InfoClick.performed -= instance.OnInfoClick;
            @InfoClick.canceled -= instance.OnInfoClick;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
        }

        public void RemoveCallbacks(IBattleSelectionActions instance)
        {
            if (m_Wrapper.m_BattleSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleSelectionActions @BattleSelection => new BattleSelectionActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IBattleSelectionActions
    {
        void OnInfoClick(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
    }
}
